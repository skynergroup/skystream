name: 🔍 Code Quality Checks

on:
  push:
    branches: [ main, production, develop ]
  pull_request:
    branches: [ main, production, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Lint and format checks
  lint-and-format:
    name: 🧹 Lint & Format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check Prettier formatting
      run: |
        echo "Checking code formatting with Prettier..."
        npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,md,json}" || {
          echo "❌ Code formatting issues found!"
          echo "Run 'npm run format' to fix formatting issues"
          exit 1
        }
        echo "✅ Code formatting is correct"

    - name: Run ESLint
      run: |
        echo "Running ESLint checks..."
        npx eslint "src/**/*.{js,jsx,ts,tsx}" --max-warnings 10 || {
          echo "⚠️ ESLint issues found - will be addressed in future iterations"
          echo "Run 'npm run lint:fix' to fix auto-fixable issues"
        }
        echo "✅ ESLint checks completed"

    - name: Check for unused dependencies
      run: |
        echo "Checking for unused dependencies..."
        npx depcheck --ignores="@types/*,eslint-*,prettier,vite" || {
          echo "⚠️ Unused dependencies found"
          echo "Consider removing unused dependencies to reduce bundle size"
        }

  # Type checking (if using TypeScript)
  type-check:
    name: 🔧 Type Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check if TypeScript is used
      id: check-ts
      run: |
        if [ -f "tsconfig.json" ]; then
          echo "typescript=true" >> $GITHUB_OUTPUT
          echo "✅ TypeScript configuration found"
        else
          echo "typescript=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No TypeScript configuration found, skipping type checks"
        fi

    - name: Run TypeScript type checking
      if: steps.check-ts.outputs.typescript == 'true'
      run: |
        echo "Running TypeScript type checking..."
        npx tsc --noEmit || {
          echo "❌ TypeScript type errors found!"
          exit 1
        }
        echo "✅ TypeScript type checking passed"

  # Build verification
  build-check:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        cp .env.example .env.local
        echo "Environment file created for build test"

    - name: Test build process
      run: |
        echo "Testing build process..."
        npm run build || {
          echo "❌ Build failed!"
          exit 1
        }
        echo "✅ Build completed successfully"

    - name: Check build output
      run: |
        echo "Checking build output..."
        if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
          echo "✅ Build output directory exists and is not empty"
          echo "Build size:"
          du -sh dist/
        else
          echo "❌ Build output directory is missing or empty"
          exit 1
        fi

    - name: Analyze bundle size
      run: |
        echo "Analyzing bundle size..."
        if command -v npx &> /dev/null; then
          npx vite-bundle-analyzer dist/ --mode static --report-filename bundle-report.html || echo "Bundle analyzer not available"
        fi

  # Security audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        echo "Running npm security audit..."
        npm audit --audit-level=moderate || {
          echo "⚠️ Security vulnerabilities found!"
          echo "Run 'npm audit fix' to fix auto-fixable vulnerabilities"
          npm audit --audit-level=moderate --json > audit-results.json || true
        }

    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-${{ github.sha }}
        path: audit-results.json
        retention-days: 30

  # Code complexity analysis
  complexity-analysis:
    name: 📊 Complexity Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install complexity analysis tools
      run: npm install -g complexity-report

    - name: Analyze code complexity
      run: |
        echo "Analyzing code complexity..."
        find src -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | head -20 | while read file; do
          echo "Analyzing: $file"
          cr "$file" --format json || echo "Could not analyze $file"
        done

  # Performance checks
  performance-check:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        cp .env.example .env.local

    - name: Build for performance testing
      run: npm run build

    - name: Check bundle sizes
      run: |
        echo "Checking bundle sizes..."
        find dist -name "*.js" -exec ls -lh {} \; | awk '{print $5, $9}' | sort -hr
        
        # Check for large bundles (>1MB)
        find dist -name "*.js" -size +1M -exec echo "⚠️ Large bundle found: {} ($(ls -lh {} | awk '{print $5}'))" \;

    - name: Check for common performance issues
      run: |
        echo "Checking for common performance issues..."
        
        # Check for console.log statements in production build
        if grep -r "console\.log" dist/ > /dev/null; then
          echo "⚠️ console.log statements found in production build"
        else
          echo "✅ No console.log statements in production build"
        fi
        
        # Check for unminified code
        if grep -r "function " dist/*.js | head -1 > /dev/null; then
          echo "⚠️ Potentially unminified code found"
        else
          echo "✅ Code appears to be properly minified"
        fi

  # Summary job
  quality-summary:
    name: 📋 Quality Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, build-check, security-audit, complexity-analysis, performance-check]
    if: always()
    steps:
    - name: Generate quality report
      run: |
        echo "## 🔍 Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.lint-and-format.result }}" == "success" ]]; then
          echo "✅ **Lint & Format**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Lint & Format**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.type-check.result }}" == "success" ]]; then
          echo "✅ **Type Check**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Type Check**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.build-check.result }}" == "success" ]]; then
          echo "✅ **Build Check**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build Check**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.security-audit.result }}" == "success" ]]; then
          echo "✅ **Security Audit**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Security Audit**: Issues found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.performance-check.result }}" == "success" ]]; then
          echo "✅ **Performance Check**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Performance Check**: Issues found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
