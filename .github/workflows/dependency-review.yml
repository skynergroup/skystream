name: 🔍 Dependency Review

on:
  pull_request:
    branches: [ main, production, develop ]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'

permissions:
  contents: read
  pull-requests: write

jobs:
  dependency-review:
    name: 📦 Review Dependencies
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        # Fail the action if any vulnerabilities are found
        fail-on-severity: moderate
        # Allow licenses (add more as needed)
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, 0BSD
        # Deny specific licenses
        deny-licenses: GPL-2.0, GPL-3.0, AGPL-1.0, AGPL-3.0
        # Comment on PR with results
        comment-summary-in-pr: always
        # Retry configuration
        retry-on-snapshot-warnings: true
        retry-on-snapshot-warnings-timeout: 120

  # Check for known vulnerabilities
  vulnerability-check:
    name: 🛡️ Vulnerability Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        echo "Running npm audit..."
        npm audit --audit-level=moderate --json > audit-results.json || true
        
        # Check if there are any moderate or higher vulnerabilities
        if npm audit --audit-level=moderate; then
          echo "✅ No moderate or higher vulnerabilities found"
        else
          echo "❌ Vulnerabilities found!"
          echo "Please review and fix the vulnerabilities before merging"
          exit 1
        fi

    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-audit-${{ github.sha }}
        path: audit-results.json
        retention-days: 30

  # Check for outdated dependencies
  outdated-check:
    name: 📅 Outdated Dependencies
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Check for outdated dependencies
      run: |
        echo "Checking for outdated dependencies..."
        npm outdated --json > outdated.json || true
        
        if [ -s outdated.json ]; then
          echo "📊 Outdated dependencies found:"
          cat outdated.json | jq -r 'to_entries[] | "\(.key): \(.value.current) → \(.value.latest)"'
        else
          echo "✅ All dependencies are up to date"
        fi

    - name: Upload outdated report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: outdated-dependencies-${{ github.sha }}
        path: outdated.json
        retention-days: 7

  # License compliance check
  license-check:
    name: 📄 License Compliance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install license checker
      run: npm install -g license-checker

    - name: Check licenses
      run: |
        echo "Checking dependency licenses..."
        license-checker --json --out licenses.json
        
        # Check for problematic licenses
        if license-checker --failOn 'GPL-2.0;GPL-3.0;AGPL-1.0;AGPL-3.0;LGPL-2.1;LGPL-3.0'; then
          echo "✅ No problematic licenses found"
        else
          echo "❌ Problematic licenses detected!"
          echo "Please review the licenses and ensure compliance"
          exit 1
        fi

    - name: Upload license report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: license-report-${{ github.sha }}
        path: licenses.json
        retention-days: 30

  # Bundle size impact analysis
  bundle-impact:
    name: 📦 Bundle Size Impact
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout base branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.base_ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies (base)
      run: npm ci

    - name: Build base version
      run: |
        cp .env.example .env.local
        npm run build
        du -sh dist/ > base-size.txt
        echo "Base bundle size: $(cat base-size.txt)"

    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        clean: false

    - name: Install dependencies (PR)
      run: npm ci

    - name: Build PR version
      run: |
        cp .env.example .env.local
        rm -rf dist/
        npm run build
        du -sh dist/ > pr-size.txt
        echo "PR bundle size: $(cat pr-size.txt)"

    - name: Compare bundle sizes
      run: |
        echo "## 📦 Bundle Size Impact" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Version | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| Base | $(cat base-size.txt | awk '{print $1}') |" >> $GITHUB_STEP_SUMMARY
        echo "| PR | $(cat pr-size.txt | awk '{print $1}') |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Calculate size difference (basic comparison)
        base_size=$(cat base-size.txt | awk '{print $1}' | sed 's/[^0-9.]//g')
        pr_size=$(cat pr-size.txt | awk '{print $1}' | sed 's/[^0-9.]//g')
        
        echo "Base size (numeric): $base_size"
        echo "PR size (numeric): $pr_size"

  # Summary
  dependency-summary:
    name: 📋 Dependency Summary
    runs-on: ubuntu-latest
    needs: [dependency-review, vulnerability-check, outdated-check, license-check]
    if: always()
    steps:
    - name: Generate summary
      run: |
        echo "## 🔍 Dependency Review Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.dependency-review.result }}" == "success" ]]; then
          echo "✅ **Dependency Review**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Dependency Review**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.vulnerability-check.result }}" == "success" ]]; then
          echo "✅ **Vulnerability Check**: No issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Vulnerability Check**: Issues found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.license-check.result }}" == "success" ]]; then
          echo "✅ **License Check**: Compliant" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **License Check**: Issues found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PR**: #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
