name: ü§ñ PR Automation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Auto-label PRs based on files changed
  auto-label:
    name: üè∑Ô∏è Auto Label
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Label PR based on changed files
      uses: actions/labeler@v5
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        configuration-path: .github/labeler.yml

  # Auto-assign reviewers
  auto-assign:
    name: üë• Auto Assign
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
    - name: Auto-assign reviewers
      uses: kentaro-m/auto-assign-action@v1.2.5
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        configuration-path: .github/auto-assign.yml

  # PR size check
  pr-size-check:
    name: üìè PR Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Check PR size
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });

          const additions = pr.additions;
          const deletions = pr.deletions;
          const changes = additions + deletions;

          let size = 'small';
          let color = '0e8a16';
          let emoji = 'üü¢';

          if (changes > 1000) {
            size = 'extra-large';
            color = 'd93f0b';
            emoji = 'üî¥';
          } else if (changes > 500) {
            size = 'large';
            color = 'fbca04';
            emoji = 'üü°';
          } else if (changes > 100) {
            size = 'medium';
            color = 'ff9500';
            emoji = 'üü†';
          }

          // Add size label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: [`size/${size}`]
          });

          // Add comment for large PRs
          if (changes > 500) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `${emoji} **Large PR Detected**\n\nThis PR has ${changes} changes (${additions} additions, ${deletions} deletions).\n\nConsider breaking it down into smaller, more focused PRs for easier review and testing.`
            });
          }

  # Check PR title format
  pr-title-check:
    name: üìù PR Title Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Check PR title format
      uses: actions/github-script@v7
      with:
        script: |
          const title = context.payload.pull_request.title;
          const validPrefixes = ['feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'test:', 'chore:', 'ci:', 'perf:', 'build:'];
          
          const hasValidPrefix = validPrefixes.some(prefix => title.toLowerCase().startsWith(prefix));
          
          if (!hasValidPrefix) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## üìù PR Title Format\n\nPlease update your PR title to follow the conventional commit format:\n\n**Valid prefixes:**\n- \`feat:\` - New features\n- \`fix:\` - Bug fixes\n- \`docs:\` - Documentation changes\n- \`style:\` - Code style changes\n- \`refactor:\` - Code refactoring\n- \`test:\` - Test changes\n- \`chore:\` - Maintenance tasks\n- \`ci:\` - CI/CD changes\n- \`perf:\` - Performance improvements\n- \`build:\` - Build system changes\n\n**Example:** \`feat: add user authentication system\``
            });
          }

  # Check for breaking changes
  breaking-changes-check:
    name: ‚ö†Ô∏è Breaking Changes Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for breaking changes
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          
          try {
            // Get changed files
            const changedFiles = execSync('git diff --name-only origin/${{ github.base_ref }}...HEAD', { encoding: 'utf8' }).trim().split('\n');
            
            const criticalFiles = [
              'package.json',
              'vite.config.js',
              'src/utils/config.js',
              '.env.example',
              'src/services/tmdbApi.js'
            ];
            
            const changedCriticalFiles = changedFiles.filter(file => criticalFiles.includes(file));
            
            if (changedCriticalFiles.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['‚ö†Ô∏è breaking-change']
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ‚ö†Ô∏è Potential Breaking Changes Detected\n\nThe following critical files have been modified:\n\n${changedCriticalFiles.map(file => `- \`${file}\``).join('\n')}\n\nPlease ensure:\n- [ ] Changes are backward compatible\n- [ ] Documentation is updated\n- [ ] Migration guide is provided if needed\n- [ ] Version bump is appropriate`
              });
            }
          } catch (error) {
            console.log('Error checking for breaking changes:', error.message);
          }

  # Auto-merge dependabot PRs
  auto-merge-dependabot:
    name: ü§ñ Auto-merge Dependabot
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'
    steps:
    - name: Check if PR is from Dependabot
      id: check-dependabot
      run: |
        if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
          echo "is_dependabot=true" >> $GITHUB_OUTPUT
        else
          echo "is_dependabot=false" >> $GITHUB_OUTPUT
        fi

    - name: Enable auto-merge for Dependabot PRs
      if: steps.check-dependabot.outputs.is_dependabot == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          
          // Only auto-merge patch and minor updates
          const title = pr.title.toLowerCase();
          const isPatch = title.includes('patch') || title.includes('bump') && !title.includes('major');
          const isMinor = title.includes('minor');
          
          if (isPatch || isMinor) {
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              event: 'APPROVE',
              body: 'ü§ñ Auto-approving Dependabot patch/minor update'
            });
            
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              merge_method: 'squash'
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: 'ü§ñ This Dependabot PR requires manual review as it contains major version updates.'
            });
          }

  # PR checklist reminder
  pr-checklist:
    name: ‚úÖ PR Checklist
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
    - name: Add PR checklist comment
      uses: actions/github-script@v7
      with:
        script: |
          const checklist = `## üìã PR Checklist

          Please ensure your PR meets the following criteria:

          ### Code Quality
          - [ ] Code follows the project's style guidelines
          - [ ] Self-review of code has been performed
          - [ ] Code is properly commented, particularly in hard-to-understand areas
          - [ ] No console.log statements in production code

          ### Testing
          - [ ] Tests have been added/updated for new functionality
          - [ ] All tests pass locally
          - [ ] Manual testing has been performed

          ### Documentation
          - [ ] Documentation has been updated if needed
          - [ ] README.md updated if new features/setup steps added
          - [ ] API documentation updated if applicable

          ### Security & Performance
          - [ ] No sensitive information exposed
          - [ ] Performance impact considered
          - [ ] Accessibility guidelines followed

          ### Deployment
          - [ ] Environment variables updated if needed
          - [ ] Database migrations included if applicable
          - [ ] Backward compatibility maintained

          ---
          *This checklist is automatically generated. Please check off completed items.*`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: checklist
          });

  # Stale PR check
  stale-pr-check:
    name: üï∞Ô∏è Stale PR Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - name: Mark stale PRs
      uses: actions/stale@v9
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        stale-pr-message: |
          This PR has been automatically marked as stale because it has not had recent activity. 
          It will be closed if no further activity occurs within 7 days.
          
          If this PR is still relevant, please:
          - Add a comment to keep it active
          - Rebase on the latest develop branch
          - Address any review feedback
        close-pr-message: |
          This PR has been automatically closed due to inactivity. 
          If you believe this was closed in error, please reopen it and add a comment explaining why.
        days-before-stale: 14
        days-before-close: 7
        stale-pr-label: 'stale'
        exempt-pr-labels: 'keep-open,in-progress,blocked'

  # Comment commands
  comment-commands:
    name: üí¨ Comment Commands
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    steps:
    - name: Process comment commands
      uses: actions/github-script@v7
      with:
        script: |
          const comment = context.payload.comment.body.toLowerCase().trim();
          const commenter = context.payload.comment.user.login;
          
          // Only allow repo collaborators to use commands
          const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
            owner: context.repo.owner,
            repo: context.repo.repo,
            username: commenter
          }).catch(() => ({ data: { permission: 'none' } }));
          
          if (!['admin', 'write'].includes(collaborator.permission)) {
            return;
          }
          
          if (comment === '/rerun-tests') {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'üîÑ Triggering test re-run...'
            });
            
            // Trigger workflow re-run (you'd need to implement this)
          } else if (comment === '/ready-for-review') {
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              draft: false
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '‚úÖ PR marked as ready for review!'
            });
          } else if (comment.startsWith('/assign ')) {
            const assignee = comment.replace('/assign ', '').trim();
            
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              assignees: [assignee]
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üë§ Assigned to @${assignee}`
            });
          }
